import rsa

alice = "Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, 'and what is the use of a book,' thought Alice 'without pictures or conversation?'"
hg1 = "Space is big. Really big. You just won't believe how vastly hugely mind-bogglingly big it is. I mean, you may think it's a long way down the road to the chemist, but that's just peanuts to space. Listen..."
hg2 = "The story so far:\n\tIn the beginning the Universe was created.\n\tThis has made a lot of people very angry and been widely regarded as a bad move.\n\tMany races believe that it was created by some sort of god, though the Jatravartid people of Viltvodle VI believe that the entire Universe was in fact sneezed out of the nose of a being called the Great Green Arkleseizure."
hg3 = "The regular early morning yell of horror was the sound of Arthur Dent waking up and suddenly remembering where he was.\n\tIt wasn't just that the cave was cold, it wasn't just that it was damp and smelly. It was that the cave was in the middle of Islington and there wasn't a bus due for two million years."
hobbit = "In a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to eat: it was a hobbit-hole, and that means comfort."
holmes = "Mr. Sherlock Holmes, who was usually very late in the mornings, save upon those not infrequent occasions when he was up all night, was seated at the breakfast table."
pp2 = "Mr. Bennet was among the earliest of those who waited on Mr. Bingley. He had always intended to visit him, though to the last always assuring his wife that he should not go; and till the evening after the visit was paid she had no knowledge of it. It was then disclosed in the following manner. Observing his second daughter employed in trimming a hat, he suddenly addressed her with:\n\t\"I hope Mr. Bingley will like it, Lizzy.\""
rime = "It is an ancient Mariner,\nAnd he stoppeth one of three.\n\"By thy long grey beard and glittering eye,\nNow wherefore stopp'st thou me?"
study = "In the year 1878 I took my degree of Doctor of Medicine of the University of London, and proceeded to Netley to go through the course prescribed for surgeons in the army. Having completed my studies there, I was duly attached to the Fifth Northumberland Fusiliers as Assistant Surgeon. The regiment was stationed in India at the time, and before I could join it, the second Afghan war had broken out. On landing at Bombay, I learned that my corps had advanced through the passes, and was already deep in the enemy's country. I followed, however, with many other officers who were in the same situation as myself, and succeeded in reaching Candahar in safety, where I found my regiment, and at once entered upon my new duties."


ri_public, ri_private = rsa.generate_keys(1031, 1973)
rsa.test_encryption((ri_public, ri_private), "Share & Enjoy")

message = r"""rob:~/iCloud/MATH4011$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.3.1 (2019-12-30)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia> using Primes

julia> using Dates

julia> begin
       t0 = now()
       println(factor(11050818803971))
       println(totient(11050818803971))
       t1=now()
       println(t1-t0)
       end
Primes.Factorization(3108727 => 1,3554773 => 1)
11050812140472
435 milliseconds"""

# sp_error = (358013797216, 11050818803971)  # bad value of k!
sp_public = (1841803133995, 11050818803971)
sp_phi = 11050818803971 - 3108727 - 3554773 + 1  # M - p - q + 1 == (p-1)(q-1)
sp_private = (rsa.mult_inv_mod_m(sp_public[0], sp_phi), sp_public[1])
rsa.test_encryption((sp_public, sp_private), "Share & Enjoy")

print("\n\nmessage encrypted with SP Public: ")
print(rsa.encrypt(sp_public, message))

# Caitlyn Shields
caitlyn_public = (41, 731)
caitlyn_private = rsa.crack_key(caitlyn_public)
caitlyn_to_sp = [6263311345484, 6285889251621, 4042337422197, 4971988757524, 4943655274522, 431203742272, 4572727629638, 5361011087446, 5265003312512, 431203742272, 741418061070, 5577428068022, 777718069721, 431203742272, 9694748633714, 8739872412237, 782388856422, 6275089816994, 4943655274522, 4042337422197, 4971988757524, 431203742272, 6456295664062, 5361011087446, 5577428068022, 431203742272, 4042337422197, 782388856422, 782388856422, 431203742272, 4572727629638, 5361011087446, 5265003312512, 5577428068022, 431203742272, 10953532291591, 4042337422197, 2978986206283, 6275089816994, 8739872412237, 4971988757524, 7054361707271, 8739872412237, 431203742272, 4042337422197, 4971988757524, 8036543819420, 431203742272, 5361011087446, 1562748450461, 3126326383448, 6275089816994, 5361011087446, 5265003312512, 3264045899283, 431203742272, 7054361707271, 4042337422197, 5577428068022, 8739872412237, 431203742272, 6456295664062, 5361011087446, 5577428068022, 431203742272, 4572727629638, 5361011087446, 5265003312512, 5577428068022, 431203742272, 3264045899283, 2978986206283, 5265003312512, 8036543819420, 8739872412237, 4971988757524, 2978986206283, 3264045899283, 777718069721, 431203742272, 8042698627940, 8739872412237, 431203742272, 4042337422197, 3264045899283, 431203742272, 6456295664062, 5265003312512, 2978986206283, 5265003312512, 5577428068022, 8739872412237, 431203742272, 8739872412237, 8036543819420, 5265003312512, 7054361707271, 4042337422197, 2978986206283, 5361011087446, 5577428068022, 3264045899283, 431203742272, 5577428068022, 8739872412237, 4042337422197, 782388856422, 782388856422, 4572727629638, 431203742272, 4042337422197, 8036543819420, 3590117263683, 6275089816994, 5577428068022, 8739872412237, 431203742272, 4572727629638, 5361011087446, 5265003312512, 431203742272, 4042337422197, 4971988757524, 8036543819420, 431203742272, 4042337422197, 10953532291591, 10953532291591, 5577428068022, 8739872412237, 7054361707271, 6275089816994, 4042337422197, 2978986206283, 8739872412237, 431203742272, 8739872412237, 3126326383448, 8739872412237, 5577428068022, 4572727629638, 2978986206283, 6285889251621, 6275089816994, 4971988757524, 6795382951445, 431203742272, 4572727629638, 5361011087446, 5265003312512, 9542449231150, 3126326383448, 8739872412237, 431203742272, 8036543819420, 5361011087446, 4971988757524, 8739872412237, 431203742272, 6456295664062, 5361011087446, 5577428068022, 431203742272, 5265003312512, 3264045899283, 431203742272, 5361011087446, 3126326383448, 8739872412237, 5577428068022, 431203742272, 2978986206283, 6285889251621, 8739872412237, 431203742272, 10953532291591, 4042337422197, 3264045899283, 2978986206283, 431203742272, 7054361707271, 5361011087446, 5265003312512, 10953532291591, 782388856422, 8739872412237, 431203742272, 5361011087446, 6456295664062, 431203742272, 4572727629638, 8739872412237, 4042337422197, 5577428068022, 3264045899283, 777718069721, 431203742272, 1594642148902, 5361011087446, 5265003312512, 431203742272, 3590117263683, 4042337422197, 4943655274522, 8739872412237, 431203742272, 5265003312512, 3264045899283, 431203742272, 6456295664062, 8739872412237, 8739872412237, 782388856422, 431203742272, 7054361707271, 4042337422197, 10953532291591, 4042337422197, 1562748450461, 782388856422, 8739872412237, 431203742272, 4042337422197, 4971988757524, 8036543819420, 431203742272, 5577428068022, 8739872412237, 3590117263683, 6275089816994, 4971988757524, 8036543819420, 431203742272, 5265003312512, 3264045899283, 431203742272, 5546854320226, 6285889251621, 4042337422197, 2978986206283, 431203742272, 6275089816994, 2978986206283, 431203742272, 6275089816994, 3264045899283, 431203742272, 2978986206283, 5361011087446, 431203742272, 1562748450461, 8739872412237, 431203742272, 4042337422197, 431203742272, 6795382951445, 5577428068022, 8739872412237, 4042337422197, 2978986206283, 431203742272, 2978986206283, 8739872412237, 4042337422197, 7054361707271, 6285889251621, 8739872412237, 5577428068022, 777718069721]
sp_to_caitlyn = [72, 332, 627, 168, 511, 627, 274, 132, 168, 90, 192, 152, 168, 90, 45, 45, 168, 511, 332, 507, 654, 511, 168, 377, 332, 168, 316, 152, 168, 152, 664, 139, 152, 45, 45, 152, 654, 377, 168, 377, 152, 90, 139, 614, 152, 192, 132, 158, 158, 158, 168, 90, 654, 83, 168, 90, 377, 168, 90, 168, 377, 507, 316, 152, 168, 374, 614, 152, 654, 168, 374, 152, 505, 192, 152, 168, 511, 332, 507, 654, 511, 168, 377, 332, 168, 152, 132, 177, 152, 139, 507, 90, 45, 45, 274, 168, 654, 152, 152, 83, 168, 177, 152, 332, 177, 45, 152, 168, 374, 507, 377, 614, 168, 132, 377, 332, 654, 511, 168, 100, 322, 392, 621, 168, 319, 90, 139, 471, 511, 192, 332, 627, 654, 83, 132, 158, 168, 420, 505, 316, 168, 132, 627, 192, 152, 168, 374, 152, 505, 45, 45, 168, 471, 152, 152, 177, 168, 507, 654, 168, 377, 332, 627, 139, 614, 158]

print("\n\nmessage decrypted with SP Private:")
print(rsa.decrypt(sp_private, caitlyn_to_sp))

print("\n\nmessage decrypted with Caitlyn Private:")
print(rsa.decrypt(caitlyn_private, sp_to_caitlyn))

print("\n\nmessage encrypted with Caitlyn Public:")
print(rsa.encrypt(caitlyn_public, pp2))

# Cori Dickman
cori_public = (31, 1425587)
cori_private = rsa.crack_key(cori_public)
cori_to_sp = [172328, 550556, 852109, 815889, 951785, 171917, 113349, 467157, 88669, 951785, 509329, 511615, 815889, 951785, 509329, 385880, 803038, 467157, 509329, 113349, 467157, 803038, 385880, 511615, 467157, 385880, 1352042, 1352042, 815889, 951785, 815889, 972298, 467157, 1101674, 113349, 467157, 1101674, 467157, 743616, 951785, 1101674, 88669, 511615, 509329, 88669, 1101674, 852109, 467157, 511615, 815889, 113349, 511615, 467157, 1352042, 385880, 951785, 467157, 972298, 815889, 511615, 815889, 951785, 650093, 509329, 803038, 509329, 803038, 559769, 467157, 965826, 508381, 815889, 511615, 508381, 815889, 951785, 467157, 1101674, 467157, 559769, 509329, 1333134, 815889, 803038, 467157, 509329, 803038, 511615, 815889, 559769, 815889, 951785, 467157, 509329, 113349, 467157, 385880, 951785, 467157, 509329, 113349, 467157, 803038, 385880, 511615, 467157, 1101674, 467157, 845295, 550556, 1101674, 972298, 951785, 1101674, 511615, 509329, 88669, 467157, 951785, 815889, 113349, 509329, 972298, 550556, 815889, 1422451, 467157, 511615, 508381, 815889, 467157, 88669, 1101674, 852109, 88669, 550556, 852109, 1101674, 511615, 509329, 385880, 803038, 113349, 467157, 509329, 803038, 1333134, 385880, 852109, 1333134, 815889, 972298, 467157, 1101674, 951785, 815889, 467157, 511615, 385880, 385880, 467157, 88669, 550556, 650093, 1091259, 815889, 951785, 113349, 385880, 650093, 815889, 467157, 550556, 803038, 852109, 815889, 113349, 113349, 467157, 511615, 508381, 815889, 467157, 650093, 385880, 972298, 550556, 852109, 550556, 113349, 467157, 509329, 113349, 467157, 113349, 650093, 1101674, 852109, 852109, 316553]

print("\n\nmessage decrypted with Cori Private:")
print(rsa.decrypt(cori_private, cori_to_sp))

print("\n\nmessage encrypted with Cori Public")
print(rsa.encrypt(cori_public, alice))

# Kyle Etter
kyle_public = (523, 2093)
kyle_private = rsa.crack_key(kyle_public)
kyle_to_sp = [1063, 2733, 2246, 1913, 2236, 1354, 3166, 3166, 1354, 2517, 2712, 176, 2787, 1913, 917, 2246, 1430, 2712, 508, 2246, 1913, 2712, 3228, 1913, 2236, 1354, 917, 1913, 508, 2712, 1430, 2527, 2246, 3166, 2246, 1849, 1913, 917, 2246, 1849, 1913, 1354, 176, 2712, 1354, 176, 3228, 1531, 1913, 1063, 2733, 2246, 3410, 1913, 2693, 917, 2246, 1913, 2787, 917, 2246, 2693, 842, 1913, 1354, 176, 1913, 2889, 3228, 942, 842, 1913, 2693, 2826, 1354, 942, 842, 1913, 2246, 1086, 2246, 917, 3410, 842, 2733, 2712, 176, 2787, 660, 1913, 2826, 942, 842, 1913, 2246, 3228, 508, 2246, 1430, 2712, 2693, 3166, 3166, 3410, 1913, 842, 2693, 1430, 1354, 3228, 1531, 1913, 331, 1354, 942, 1913, 2517, 2712, 3166, 3166, 1913, 176, 2246, 2246, 1849, 1913, 2693, 1913, 2733, 2693, 3166, 2236, 1913, 1430, 942, 508, 1913, 1354, 2236, 1913, 2693, 508, 508, 3166, 2246, 1913, 1430, 2712, 1849, 2246, 917, 1913, 1086, 2712, 176, 2246, 2787, 2693, 917, 660, 1913, 1354, 176, 2246, 1913, 842, 2693, 2826, 3166, 2246, 1913, 3228, 508, 1354, 1354, 176, 1913, 1354, 2236, 1913, 3228, 942, 2787, 2693, 917, 660, 1913, 1354, 176, 2246, 1913, 2693, 176, 1849, 1913, 1354, 176, 2246, 1913, 2733, 2693, 3166, 2236, 1913, 842, 2246, 2693, 3228, 508, 1354, 1354, 176, 3228, 1913, 1354, 2236, 1913, 2527, 1354, 3228, 2733, 2246, 917, 1913, 3228, 2693, 3166, 842, 1531, 1913, 1363, 2693, 3228, 842, 3166, 3410, 660, 1913, 3410, 1354, 942, 1913, 2517, 2712, 3166, 3166, 1913, 176, 2246, 2246, 1849, 1913, 1354, 176, 2246, 1913, 3166, 2693, 917, 2787, 2246, 1913, 917, 2246, 1849, 1913, 1354, 176, 2712, 1354, 176, 660, 1913, 3228, 3166, 2712, 1430, 2246, 1849, 1913, 842, 2733, 2712, 176, 3166, 3410, 1531, 1913, 2688, 2712, 917, 3228, 842, 660, 1913, 2517, 2733, 2712, 3228, 2527, 1913, 842, 2733, 2246, 1913, 1086, 2712, 176, 2246, 2787, 2693, 917, 660, 1913, 3228, 942, 2787, 2693, 917, 1913, 2693, 176, 1849, 1913, 3228, 2693, 3166, 842, 1913, 842, 1354, 2787, 2246, 842, 2733, 2246, 917, 1913, 2517, 2712, 842, 2733, 1913, 1354, 176, 2246, 1913, 1430, 942, 508, 1913, 1354, 2236, 1913, 2517, 2693, 842, 2246, 917, 1913, 2712, 176, 1913, 2693, 1913, 3228, 2133, 2693, 3166, 3166, 1913, 2826, 1354, 2517, 3166, 1913, 942, 176, 842, 2712, 3166, 1913, 3228, 942, 2787, 2693, 917, 1913, 2693, 176, 1849, 1913, 3228, 2693, 3166, 842, 1913, 1849, 2712, 3228, 3228, 1354, 3166, 1086, 2246, 1531, 1913, 1609, 3166, 2693, 1430, 2246, 1913, 1354, 176, 2712, 1354, 176, 1913, 3228, 3166, 2712, 1430, 2246, 3228, 1913, 2712, 176, 1913, 2693, 1913, 2889, 2693, 917, 2424, 1913, 508, 1354, 942, 917, 1913, 1086, 2712, 176, 2246, 2787, 2693, 917, 1913, 2133, 2712, 1715, 842, 942, 917, 2246, 1913, 1354, 1086, 2246, 917, 1531, 1913, 1363, 2246, 842, 1913, 3228, 2712, 842, 1913, 2693, 842, 1913, 917, 1354, 1354, 2133, 1913, 842, 2246, 2133, 508, 2246, 917, 2693, 842, 942, 917, 2246, 1913, 2236, 1354, 917, 1913, 940, 1913, 2733, 1354, 942, 917, 1913, 842, 2733, 2246, 176, 1913, 1430, 2733, 2712, 3166, 3166, 1531]

# print("\n\nmessage decrypted with SP Private:")
# print(rsa.decrypt(sp_private, kyle_to_sp))

print("\n\nmessage encrypted with Kyle Public:")
print(rsa.encrypt(kyle_public, study))

# John Bodenschatz
jb_public = (71, 1953023)
jb_private = rsa.crack_key(jb_public)
jb_to_sp = [5522338302351, 5265003312512, 3590117263683, 1562748450461, 8739872412237, 5577428068022, 431203742272, 6263311345484, 6285889251621, 8739872412237, 5361011087446, 5577428068022, 4572727629638, 431203742272, 431203742272, 6275089816994, 3264045899283, 431203742272, 2978986206283, 6285889251621, 8739872412237, 431203742272, 1562748450461, 8739872412237, 8739872412237, 9542449231150, 3264045899283, 431203742272, 4943655274522, 4971988757524, 8739872412237, 8739872412237, 3264045899283, 777718069721]
jb_message = [402741, 1504314, 958824, 620944, 564230, 353120, 1741531, 156617, 348411, 564230, 401675, 353120, 813587, 1741531, 1741531, 186254, 1401456, 1741531, 203244, 348411, 564230, 1741531, 620944, 564230, 564230, 1851240, 1401456, 1741531, 299246, 593871, 564230, 564230, 1401456, 63359]

print("\n\nmessage decrypted with SP Private:")
print(rsa.decrypt(sp_private, jb_to_sp))

print("\n\nmessage decrypted with John Private:")
print(rsa.decrypt(jb_private, jb_message))

print("\n\nmessage encrypted with John Public:")
print(rsa.encrypt(jb_public, rime))

print("\n\nmessage encrypted with John Private:")
print(rsa.encrypt(jb_private, rime))

print("\n\nmessage encrypted with RI Public:")
print(rsa.encrypt(ri_public, "def crack_key(public):\n    k, M = public\n    phi = int(primes.phi(M))\n    l = mult_inv_mod_m(k, phi)\n    return (l, M)"))

# Sarah McRae
sm_public = (101, 203)
sm_private = rsa.crack_key(sm_public)
sm_message = [47, 45, 2, 121, 67, 2, 67, 20, 59, 45, 94, 40, 95, 2, 160, 45, 109, 2, 121, 20, 95, 40, 2, 195, 59, 19, 45, 40, 95, 160, 119, 19, 40, 2, 67, 40, 160, 95, 173, 2, 21, 67, 2, 163, 160, 58, 104, 40, 95, 2, 94, 160, 195, 40, 2, 121, 40, 2, 173, 20, 121, 40, 2, 160, 109, 195, 84, 99, 40, 2, 58, 104, 160, 58, 2, 47, 44, 195, 40, 2, 119, 40, 40, 45, 2, 58, 59, 95, 45, 84, 45, 94, 2, 20, 195, 40, 95, 2, 84, 45, 2, 121, 67, 2, 121, 84, 45, 109, 2, 40, 195, 40, 95, 2, 173, 84, 45, 99, 40, 191, 2,145, 104, 40, 45, 40, 195, 40, 95, 2, 67, 20, 59, 2, 163, 40, 40, 19, 2, 19, 84, 25, 40, 2, 99, 95, 84, 58, 84, 99, 84, 187, 84, 45, 94, 2, 160, 45, 67, 20, 45, 40, 18, 2,104, 40, 2, 58, 20, 19, 109, 2, 121, 40, 18, 2, 43, 59, 173, 58, 2, 95, 40, 121, 40, 121, 119, 40, 95, 2, 58, 104, 160, 58, 2, 160, 19, 19, 2, 58, 104, 40, 2, 168, 40, 20, 168, 19, 40, 2, 84, 45, 2, 58, 104, 84, 173, 2, 147, 20, 95, 19, 109, 2, 104, 160, 195, 40, 45, 44, 58, 2, 104, 160, 109, 2, 58, 104, 40, 2, 160, 109, 195, 160, 45, 58, 160, 94, 40, 173, 2, 58, 104, 160, 58, 2, 67, 20, 59, 44, 195, 40, 2, 104, 160, 109, 191, 2, 70, 95, 20, 121, 2, 58, 104, 40, 2, 22, 95, 40, 160, 58, 2, 22, 160, 58, 173, 119, 67, 191]
print("\n\nmessage decrypted with Sarah Private:")
print(rsa.decrypt(sm_private, sm_message))

print("\n\nmessage encrypted with Sarah Public:")
print(rsa.encrypt(sm_public, hobbit))

# Joshua Locke
jl_public = (8797, 17593)
jl_to_sp = [9413625307769, 9542449231150, 782388856422, 782388856422, 431203742272, 6795382951445, 8739872412237, 2978986206283, 431203742272, 5361011087446, 5265003312512, 5577428068022, 431203742272, 8042698627940, 8739872412237, 1562748450461, 5546158039701, 4715592990602, 431203742272, 3264045899283, 8739872412237, 3264045899283, 3264045899283, 6275089816994, 5361011087446, 4971988757524, 431203742272, 4042337422197, 7054361707271, 2978986206283, 6275089816994, 3126326383448, 8739872412237, 431203742272, 4042337422197, 1562748450461, 5361011087446, 5265003312512, 2978986206283, 431203742272, 4556131148696, 5755619973830, 5602150854030, 5138615684780, 431203742272, 4042337422197, 4971988757524, 8036543819420, 431203742272, 5546854320226, 8739872412237, 9542449231150, 782388856422, 782388856422, 431203742272, 6795382951445, 8739872412237, 2978986206283, 431203742272, 3264045899283, 2978986206283, 4042337422197, 5577428068022, 2978986206283, 8739872412237, 8036543819420, 431203742272, 4042337422197, 1562748450461, 5361011087446, 5265003312512, 2978986206283, 431203742272, 4556131148696, 5755619973830, 4556131148696, 5138615684780, 777718069721]
print("\n\nmessage decrypted with SP Private:")
print(rsa.decrypt(sp_private, jl_to_sp))

print("\n\nmessage encrypted with Joshua Public:")
print(rsa.encrypt(jl_public, holmes))

# Mudi Zhang
mz_public = (391, 3127)
mz_message = [76, 97, 118, 101, 110, 100, 101, 114, 32, 103, 101, 110, 101, 114, 97, 108, 108, 121, 32, 116, 104, 114, 105, 118, 101, 115, 32, 105, 110, 32, 116, 101, 109, 112, 101, 114, 97, 116, 101, 32, 99, 108, 105, 109, 97, 116, 101, 115, 32, 97, 110, 100, 32, 100, 111, 101, 115, 32, 101, 115, 112, 101, 99, 105, 97, 108, 108, 121, 32, 119, 101, 108, 108, 32, 105, 110, 32, 116, 104, 101, 32, 77, 101, 100, 105, 116, 101, 114, 114, 97, 110, 101, 97, 110, 32, 114, 101, 103, 105, 111, 110, 44, 32, 119, 104, 101, 114, 101, 32, 109, 111, 115, 116, 32, 115, 116, 114, 97, 105, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 112, 108, 97, 110, 116, 32, 111, 114, 105, 103, 105, 110, 97, 116, 101, 46, 32, 73, 116, 8217, 115, 32, 110, 111, 116, 32, 111, 102, 116, 101, 110, 32, 115, 101, 101, 110, 32, 105, 110, 32, 116, 104, 101, 32, 104, 117, 109, 105, 100, 32, 116, 114, 111, 112, 105, 99, 97, 108, 32, 119, 97, 114, 109, 116, 104, 32, 111, 102, 32, 84, 104, 97, 105, 108, 97, 110, 100]
print("\n\nstringified message:")
print(rsa.stringify(mz_message))
print("\n\nmessage encrypted with MZ Public:")
print(rsa.encrypt(mz_public, hobbit))

# Boya Zhang
bz_public = (1007761, 2015521)
bz_message = [1727007, 1826171, 1156952, 533025, 743356, 874898, 1826171, 348186, 1819072, 533025, 1385086, 1826171, 861487, 1156952, 114973, 1385086, 1385086]
print("\n\nmessage decrypted with BZ Private:")
print(rsa.decrypt(rsa.crack_key(bz_public), bz_message))
print("\n\nmessage encrypted with BZ Public:")
print(rsa.encrypt(bz_public, hobbit))

hobbit

# Ava Lowe
# Anton C. L. Manak
# Zixi Chen
# Tyler Thonas Henley
# Naphtalie Gray
